#pragma kernel MarchCubes


#include "Includes/TriangulationLookuptable.hlsl"
#include "Includes/HelperFunctions.compute"

float _Threshold;

float _Step;

StructuredBuffer<float> _Values;

struct Triangle
{
    float3 a, b, c;
};

AppendStructuredBuffer<Triangle> _Triangles;

bool InvalidCube(int3 position)
{
    return position.x >= _BoundSize - 1 || position.y >= _BoundSize - 1 || position.z >= _BoundSize - 1;
}

float3 interpolation(float3 p1, float3 value1, float3 p2, float value2)
{
    return (p1 + (_Threshold - value1) * (p2 - p1) / (value2 - value1));
}

[numthreads(numThreads, numThreads, numThreads)]
void MarchCubes(uint3 id : SV_DispatchThreadID)
{
    if (InvalidCube(id))
        return;
    
    float cubeValues[8] =
    {
        _Values[indexFromCoord(id + uint3(0, 0, 1))],
       _Values[indexFromCoord(id + uint3(1, 0, 1))],
       _Values[indexFromCoord(id + uint3(1, 0, 0))],
       _Values[indexFromCoord(id)],
       _Values[indexFromCoord(id + uint3(0, 1, 1))],
       _Values[indexFromCoord(id + uint3(1, 1, 1))],
       _Values[indexFromCoord(id + uint3(1, 1, 0))],
       _Values[indexFromCoord(id + uint3(0, 1, 0))]
    };

    
    int cubeIndex = 0;
    if (cubeValues[0] < _Threshold)
        cubeIndex |= 1;
    if (cubeValues[1] < _Threshold)
        cubeIndex |= 2;
    if (cubeValues[2] < _Threshold)
        cubeIndex |= 4;
    if (cubeValues[3] < _Threshold)
        cubeIndex |= 8;
    if (cubeValues[4] < _Threshold)
        cubeIndex |= 16;
    if (cubeValues[5] < _Threshold)
        cubeIndex |= 32;
    if (cubeValues[6] < _Threshold)
        cubeIndex |= 64;
    if (cubeValues[7] < _Threshold)
        cubeIndex |= 128;
    
    int edges[] = triTable[cubeIndex];

    for (int i = 0; edges[i] != -1; i += 3)
    {
        int edge00 = edgeConnections[edges[i]][0];
        int edge01 = edgeConnections[edges[i]][1];
        
        int edge10 = edgeConnections[edges[i + 1]][0];
        int edge11 = edgeConnections[edges[i + 1]][1];
        
        int edge20 = edgeConnections[edges[i + 2]][0];
        int edge21 = edgeConnections[edges[i + 2]][1];
        
        Triangle tri;
        
        tri.a = interpolation(cornerOffsets[edge00] * _Step, cubeValues[edge00], cornerOffsets[edge01] * _Step, cubeValues[edge01]) + id * _Step;
        tri.b = interpolation(cornerOffsets[edge10] * _Step, cubeValues[edge10], cornerOffsets[edge11] * _Step, cubeValues[edge11]) + id * _Step;
        tri.c = interpolation(cornerOffsets[edge20] * _Step, cubeValues[edge20], cornerOffsets[edge21] * _Step, cubeValues[edge21]) + id * _Step;
        _Triangles.Append(tri);
    }
    
}
